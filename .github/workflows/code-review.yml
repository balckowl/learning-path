name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Perform code review
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_PULL_REQUEST: ${{ github.event.pull_request.number }}
        run: |
          python <<EOF
          import os
          import requests
          import re

          # 環境変数からキーを取得
          GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
          GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
          GITHUB_REPOSITORY = os.getenv('GITHUB_REPOSITORY')
          GITHUB_PULL_REQUEST = os.getenv('GITHUB_PULL_REQUEST')
          MODEL = 'gemini-1.5-flash'
          PROMPT = '以下のコード差分に不明点や不規則性がないか確認してください:'

          # GitHub APIからPull Requestの詳細を取得
          pr_api_url = f'https://api.github.com/repos/{GITHUB_REPOSITORY}/pulls/{GITHUB_PULL_REQUEST}'
          headers = {
              'Authorization': f'Bearer {GITHUB_TOKEN}',
              'Accept': 'application/vnd.github.v3+json'
          }
          pr_response = requests.get(pr_api_url, headers=headers)
          if pr_response.status_code == 200:
              pr_data = pr_response.json()
              commit_id = pr_data['head']['sha']
          else:
              print(f'GitHub APIエラー: {pr_response.status_code} - {pr_response.text}')
              exit(1)

          # GitHub APIからPull Requestの差分を取得
          diff_api_url = f'https://api.github.com/repos/{GITHUB_REPOSITORY}/pulls/{GITHUB_PULL_REQUEST}/files'
          diff_response = requests.get(diff_api_url, headers=headers)
          if diff_response.status_code == 200:
              files_changed = diff_response.json()
          else:
              print(f'GitHub APIエラー: {diff_response.status_code} - {diff_response.text}')
              exit(1)

          # `/src`ディレクトリに限定してファイルを処理
          for file in files_changed:
              filename = file['filename']
              if not filename.startswith('src/'):  # `/src`配下のファイルのみ処理
                  continue

              patch = file.get('patch')
              if not patch:
                  continue

              # 変更行を抽出
              lines = patch.split('\\n')
              hunk_start = 0
              for i, line in enumerate(lines):
                  if line.startswith('@@'):
                      # 行番号情報を抽出
                      match = re.search(r'\\+\\d+', line)
                      if match:
                          hunk_start = int(match.group(0)) - 1
                  elif line.startswith('+') and not line.startswith('+++'):
                      line_number = hunk_start + i + 1
                      code_line = line[1:]

                      # Gemini APIにリクエストを送信
                      gemini_headers = {
                          'Authorization': f'Bearer {GEMINI_API_KEY}',
                          'Content-Type': 'application/json',
                      }
                      data = {
                          'model': MODEL,
                          'messages': [
                              {'role': 'system', 'content': 'あなたは簡潔なコードレビュアーです。'},
                              {'role': 'user', 'content': f'{PROMPT}\n\n{code_line}'},
                          ],
                      }
                      gemini_response = requests.post(
                          'https://generativelanguage.googleapis.com/v1beta/chat/completions',
                          headers=gemini_headers,
                          json=data
                      )
                      if gemini_response.status_code == 200:
                          review_comment = gemini_response.json().get('choices', [{}])[0].get('message', {}).get('content', '').strip()
                          if review_comment:
                              # 修正案をGitHub suggestion形式でコメントに含める
                              suggestion = f"```suggestion\n{code_line.replace('worldd', 'world')}\n```"
                              review_comment = f"{review_comment}\n\n{suggestion}"
                              print(f'レビューコメント: {review_comment}')

                              # GitHubにコメントを投稿
                              comment_data = {
                                  'body': review_comment,
                                  'commit_id': commit_id,
                                  'path': filename,
                                  'line': line_number,
                                  'side': 'RIGHT'
                              }
                              comment_api_url = f'https://api.github.com/repos/{GITHUB_REPOSITORY}/pulls/{GITHUB_PULL_REQUEST}/comments'
                              comment_response = requests.post(comment_api_url, headers=headers, json=comment_data)
                              if comment_response.status_code == 201:
                                  print(f'コメントを投稿しました: {filename} の {line_number} 行目')
                              else:
                                  print(f'コメントの投稿に失敗しました: {comment_response.status_code} - {comment_response.text}')
                      else:
                          print(f'Gemini APIエラー: {gemini_response.status_code} - {gemini_response.text}')
          EOF
